[project]
name = "rekki-monorepo"
version = "0.0.0"
description = ""
readme = "README.md"
authors = [{ name = "Lanqing Huang", email = "lqhuang@typef.io" }]
requires-python = ">=3.13"
license = { text = "Apache-2.0" }
keywords = ['actor', 'service', 'http', 'grpc', 'asyncio']
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Framework :: AsyncIO",
  "Framework :: Trio",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: POSIX",
  "Typing :: Typed",
]
dependencies = [
  'rekki',
  # 'rekki-service',
  'rekki-http',
  'rekki-testkit',
  # 'rekki-grpc'
]

[project.urls]
Repository = "https://github.com/rekki-dev/rekki"
# Documentation = "https://rekki.readthedocs.io"
Issues = "https://github.com/rekki-dev/rekki/issues"
Releases = "https://github.com/rekki-dev/rekki/releases"
Changelog = "https://github.com/rekki-dev/rekki/blob/main/CHANGELOG.md"

[dependency-groups]
linter = ["mypy", "ruff"]
test = [
  "pytest",
  "pytest-anyio",
  "pytest-cov",
  "coverage[toml]",
  # "pytest-mypy-plugins",
]
docs = [
  "towncrier",
  "sphinx",
  "furo",
  "myst-parser",
  # "sphinx-autodoc-typehints",
]
dev = [
  "pre-commit",
  { include-group = "linter" },
  { include-group = "test" },
  { include-group = "docs" },
]

## Project Manager
[tool.uv]
package = false
python-preference = "managed"
# preview = true

[tool.uv.sources]
rekki = { workspace = true }
# rekki-service = { workspace = true }
rekki-http = { workspace = true }
rekki-testkit = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

## Type Linter

[tool.mypy] # doc: https://mypy.readthedocs.io/en/stable/config_file.html
# Disallow dynamic typing
disallow_any_unimported = true

# Untyped definitions and calls
check_untyped_defs = true
# disallow_untyped_calls = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# disallow_untyped_decorators = true

# None and Optional handling
implicit_optional = true
strict_optional = true

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

# Miscellaneous strictness flags
implicit_reexport = false
strict_concatenate = true
strict_equality = true
strict = true

# Configuring error messages
show_column_numbers = true
show_error_codes = true
# pretty = true  # disable for IDE parser; try add cli option in Makefile

# Incremental mode
incremental = true
cache_fine_grained = true

# Advanced options
warn_incomplete_stub = true

# Miscellaneous
# warn_unused_configs = true # This requires turning off incremental mode using `incremental=False`; try add cli option in Makefile

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#main-pyright-config-options
typeCheckingMode = "standard"

# Patch serveral `strict` options
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-settings-defaults
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
enableExperimentalFeatures = true

# reportMissingTypeStubs = 'warning'
reportDeprecated = 'warning'
reportDuplicateImport = 'error'
# reportIncompleteStub = 'warning'
reportInconsistentConstructor = 'warning'
reportMatchNotExhaustive = 'warning'
# reportMissingParameterType = 'warning'
# reportMissingTypeArgument = 'warning'
reportTypeCommentUsage = 'warning'
reportImportCycles = 'error'
reportMissingSuperCall = 'warning'
reportPropertyTypeMismatch = 'warning'

## Testing
[tool.pytest.ini_options]
norecursedirs = [
  '*.egg',
  '.*',
  'build',
  'dist',
  '__pycache__',
  '__mypy_cache__',
  'node_modules',
  'venv',
  '.venv',
  '.conda-venv',
  'docs',
  'examples',
  'scripts',
]
