[project]
name = "rekki-monorepo"
version = "0.0.0"
description = ""
readme = "README.md"
authors = [{ name = "Lanqing Huang", email = "lqhuang@typef.io" }]
requires-python = ">=3.13"
license = { text = "Apache-2.0" }
keywords = ['actor', 'service', 'http', 'grpc', 'asyncio']
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Framework :: AsyncIO",
  "Framework :: Trio",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: POSIX",
  "Typing :: Typed",
]
dependencies = [
  'rekki-core',
  'rekki-service',
  'rekki-http',

  # 'rekki-grpc'
]


[project.urls]
Repository = "https://github.com/rekki-dev/rekki"
# Documentation = "https://rekki.readthedocs.io"
Changelog = "https://github.com/rekki-dev/rekki/blob/main/CHANGELOG.md"
Releases = "https://github.com/rekki-dev/rekki/releases"

## Project Manager
[tool.uv]
package = false
dev-dependencies = [
  # linter
  "mypy",
  "typing-extensions",
  "black",
  "isort",
  'ruff',
  # test
  "pytest",
  "pytest-anyio",
  # commit
  "pre-commit",
]
python-preference = "managed"

[tool.uv.sources]
rekki-core = { workspace = true }
rekki-service = { workspace = true }
rekki-http = { workspace = true }
rekki-testsuite = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]


## Formatter
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'


## Linter
[tool.mypy]
# doc: https://mypy.readthedocs.io/en/stable/config_file.html
# --strict but not --no-implicit-optional
# Import discovery
ignore_missing_imports = true
follow_imports = "normal"
# Platform configuration
# python_version = "3.10"
# Disallow dynamic typing
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_generics = false
disallow_subclassing_any = true
# Untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# None and Optional handling
no_implicit_optional = false
strict_optional = true
# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
# Miscellaneous strictness flags
implicit_reexport = false
strict_equality = true
# Configuring error messages
show_column_numbers = true
show_error_context = true
show_error_codes = true
# pretty = true  # disable for IDE parser; try add cli option in Makefile
# Incremental mode
cache_fine_grained = true
# Advanced options
warn_incomplete_stub = true
# Miscellaneous
warn_unused_configs = true

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#main-pyright-config-options
typeCheckingMode = "basic"
reportGeneralTypeIssues = false
# reportPrivateUsage = false

[tool.ruff]
line-length = 88

# Enable rules:
# Pyflakes (F), pycodestyle (E, W), pydocstyle (D), pyupgrade (UP),
# flake8-bandit (S), flake8-bugbear (B), flake8-comprehensions (C4), flake8-datetimez (DTZ), flake8-pytest-style (PT)
# Pylint (PLC, PLE, PLR, PLW), Ruff-specific rules (RUF)
select = [
  "F",
  "E",
  "W",
  "D",
  "UP",
  "S",
  "B",
  "C4",
  "DTZ",
  "PT",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "RUF",
]

# extend-select = []
ignore = [
  "E501",    # Line too long (95 > 88 characters)
  "S101",    # Use of `assert` detected
  "RUF100",  # Unused `noqa` directive for: E305 (not implemented)
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
  "PLR0913", # Too many statements
  "C408",
  "B027",    # Allow non-abstract empty methods in abstract base classes
]


#  A list of check code prefixes to consider autofix-able.
fixable = ["F", "E711", "UP", "B"]
unfixable = [
  "I",
  "F401", # Don't touch unused imports
]

ignore-init-module-imports = true

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # imported but unused
"tests/**/*" = [
  "PLR2004",
  "S101",
  "TID252",
] # Tests can use magic values, assertions, and relative imports

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
section-order = [
  "future",
  "typing",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
  "testing",
]

[tool.ruff.lint.isort.sections]
typing = ["typing", "collections.abc"]

[tool.ruff.lint.pydocstyle]
convention = "google"

## Testing
[tool.pytest.ini_options]
norecursedirs = [
  '*.egg',
  '.*',
  'build',
  'dist',
  '__pycache__',
  '__mypy_cache__',
  'node_modules',
  'venv',
  '.venv',
  '.conda-venv',
  'docs',
  'examples',
  'scripts',
]
